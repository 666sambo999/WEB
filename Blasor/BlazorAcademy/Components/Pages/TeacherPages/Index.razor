@page "/teachers"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorAcademy.Model
@using BlazorAcademy.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorAcademy.Data.BlazorAcademyContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Teachers</PageTitle>

<h1>Teachers</h1>

<div style="display: flex; justify-content: space-between;">
    <div>
        <a href="teachers/create">Create New</a>
    </div>
    <div>
        <button class="btn btn-primary" @onclick="ResetFilter">Reset filter </button>
    </div>
</div>


<QuickGrid Class="table" Items="FilteredTeachers" Pagination="state">
    <PropertyColumn Property="teacher => teacher.teacher_id"  Sortable="true" Title="Id"/>
@*     <PropertyColumn Property="teacher => teacher.last_name"   Sortable="true" Title="Фамилия"/>
    <PropertyColumn Property="teacher => teacher.first_name"  Sortable="true" Title="Имя"/>
    <PropertyColumn Property="teacher => teacher.middle_name" Sortable="true" Title="Отчество"/>
 *@
	<PropertyColumn Property="teacher => teacher.last_name" Sortable="true" Title="Фамилия">
		<ColumnOptions>
			<div>
				<input type="search" @bind="lastNameFilter" @bind:event="oninput"></input>
			</div>
		</ColumnOptions>
	</PropertyColumn>
	<PropertyColumn Property="teacher => teacher.first_name" Sortable="true" Title="Имя">
		<ColumnOptions>
			<div>
				<input type="search" @bind="firstNameFilter" @bind:event="oninput"></input>
			</div>
		</ColumnOptions>
	</PropertyColumn>
	<PropertyColumn Property="teacher => teacher.middle_name" Sortable="true" Title="Отчество">
		<ColumnOptions>
			<div>
				<input type="search" @bind="middleNameFilter" @bind:event="oninput"></input>
			</div>
		</ColumnOptions>
	</PropertyColumn>
@*     <PropertyColumn Property="teacher => teacher.last_name + ' ' + teacher.first_name + ' ' + teacher.middle_name" Sortable="true" Title="ФИО" />
 *@    
@* 	<PropertyColumn Property="teacher => teacher.birth_date"  Sortable="true" Title="Дата рождения"/>
    <PropertyColumn Property="teacher => teacher.work_since"  Sortable="true" Title="Начало работы"/>
 *@
@* 	<PropertyColumn Property="teacher => (DateTime.Today - teacher.birth_date).Days/365" Sortable="true" Title="Возраст"></PropertyColumn>
 *@	<PropertyColumn Property="teacher => Teacher.age(teacher.birth_date)" Title="Возраст"></PropertyColumn>
	<PropertyColumn Property="teacher => (DateTime.Today - teacher.work_since).Days/365" Sortable="true" Title="Стаж работы"></PropertyColumn>

    <TemplateColumn Context="teacher">
@*         <a href="@($"teachers/edit?teacher_id={teacher.teacher_id}")">Edit</a> |
 *@        <a href="@($"teachers/details?teacher_id={teacher.teacher_id}")">Details</a> |
@*         <a href="@($"teachers/delete?teacher_id={teacher.teacher_id}")">Delete</a>
 *@    </TemplateColumn>
</QuickGrid>

<Paginator State="state" />

<div>
	<select @bind="state.ItemsPerPage" @bind:event="onchange">
		<option>3</option>
		<option>5</option>
		<option>10</option>
		<option>15</option>
	</select>
</div>
@code {
	PaginationState state = new PaginationState { ItemsPerPage = 5 };
    private BlazorAcademyContext context = default!;
	string lastNameFilter = "";
	string firstNameFilter = "";
	string middleNameFilter = "";
	IQueryable<Teacher> FilteredTeachers => context.Teacher.Where(t => (t.last_name.Contains(lastNameFilter) && t.first_name.Contains(firstNameFilter) && t.middle_name.Contains(middleNameFilter)));
    
	protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

	public void ResetFilter()
	{
		lastNameFilter = "";
		firstNameFilter = "";
		middleNameFilter = "";
	}
}
